package com.transfer.video.vtms.device;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class DeviceInfoServiceImpl implements DeviceInfoService {
	@Autowired
	DeviceMapper deviceMapper;

	@Override
	public List<Device> getDevicesInfo(Device device) {
		// 로그인 후 처음 보는 목록조회 화면일 경우
		// 상태가 장애인 목록만을 보여준다.
		return this.deviceMapper.selectAll(device);
	}

	@Override
	public Device getDeviceInfo(String ip) {
		Device device = null;

		if (ip != null && !"".equals(ip)) {
			device = this.deviceMapper.select(ip);
		}

		return device;
	}

	@Override
	public void addDeviceInfo(Device device) {
		// 1. 에이전트로부터 받은 디바이스 정보가 존재하는가?
		if (device.getIp() != null && device.getHostName() != null && device.getAccessKey() != null
				&& !"".equals(device.getIp()) && !"".equals(device.getHostName())
				&& !"".equals(device.getAccessKey())) {
			// 2. 예-> 디바이스 정보를 상세 조회한다.
			Device resultDevice = this.deviceMapper.select(device.getIp());
			// 3. 조회 결과가 존재하지 않는가?
			if (resultDevice == null) {
				// 4. 예-> 디바이스 정보를 등록한다.
				this.deviceMapper.update(device);
			} else {
				// 5. 아니오-> 접근키가 일치하고, 상태 값이 'n'인가?
				if (device.getAccessKey().equals(resultDevice.getAccessKey()) 
						&& "N".equals(resultDevice.getStatus())) {
					// 6. 디바이스 정보를 수정한다.				
					this.deviceMapper.update(new Device(device.getIp(), "Y"));
				}
			}
		}
	}

	@Override
	public void editDeviceInfo(HttpServletRequest request) {
		// 1. 수정 정보를 반영한다.
		// 2. 영상 파일을 첨부했는가?
			// 3. 예: 디바이스를 상세 조회한다. .
			// 4. 영상 정보를 전송한다.
			// 5. 이력을 등록한다. 
		
	}

	@Override
	public void removeDeviceInfo(String ip) {
		// 1. ip가 존재하는가?
		if (ip != null && !"".equals(ip)) {
			// 2. 디바이스 상태를 수정한다.
			this.deviceMapper.delete(ip);
		}
	}
}
