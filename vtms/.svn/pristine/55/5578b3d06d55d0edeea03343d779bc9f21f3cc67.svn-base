package com.transfer.video.vtms.device;

import java.io.File;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.transfer.video.vtms.video.TransferHistory;

@RestController
public class DeviceInfoController {
	@Autowired
	private DeviceInfoService deviceInfoService;

	/**
	 * 디바이스 정보 목록 화면 출력
	 * */
	@GetMapping("/device")
	public ModelAndView getDevicesInfo() {
		return new ModelAndView("/device/list");
	}
	/**
	 * 디바이스 정보 목록 조회
	 * */	
	@GetMapping(value = "/device", consumes = "application/json")
	public List<Device> getDevicesInfo(String connStatus) {
		Device device = new Device();
		device.setConnStatus(connStatus);

		return this.deviceInfoService.getDevicesInfo(device);
	}
	
	/**
	 * 디바이스 정보 상세 조회
	 * */
	@GetMapping("/device/{ip}")
	public ModelAndView getDeviceInfo(@PathVariable("ip") String ip) {
		ModelAndView mav = new ModelAndView("/device/detail");
		
		Device device = this.deviceInfoService.getDeviceInfo(new Device(ip, null));
		mav.addObject("device", device);
		
		return mav;
	}
	
	/**
	 * 디바이스 정보 등록
	 * */
	@PostMapping(value = "/device", consumes = "application/json;charset=utf-8")
	public Message addDeviceInfo(HttpServletRequest request) {
		Device device = new Device();
		device.setIp(request.getParameter("ip"));
		device.setHostName(request.getParameter("hostName"));
		device.setAccessKey(request.getParameter("accessKey"));
		
		this.deviceInfoService.addDeviceInfo(device);
		
		//모르는 부분
		return new Message("200", "success");
	}
	
	/**
	 * 디바이스 정보 수정
	 * */
	@PutMapping("/device")
	public ModelAndView editDeviceInfo(MultipartFile videoFile, HttpServletRequest request) 
			throws Exception {
		Device device = new Device();
		device.setIp(request.getParameter("ip"));
		device.setName(request.getParameter("name"));
		device.setPlace(request.getParameter("place"));

		try {
			File file = new File(videoFile.getOriginalFilename());
			videoFile.transferTo(file);

			VideoInfo videoInfo = new VideoInfo();
			videoInfo.setVideoFile(file);

			device.setVideoInfo(videoInfo);
		} catch(Exception e) {
			e.printStackTrace();
		}

		TransferHistory transferHistory = new TransferHistory();
		transferHistory.setNote(request.getParameter("note"));	
		
		boolean isResult = this.deviceInfoService.editDeviceInfo(device, transferHistory);
		if (isResult) {
			// msg <-- ""
		} else {
			// msg <-- "error"			
		}

		return new ModelAndView(new RedirectView("/device/" + request.getParameter("ip")));
	}
	
	/**
	 * 디바이스 정보 삭제
	 * */
	@DeleteMapping("/device/{ip}")
	public ModelAndView removeDeviceInfo(@PathVariable("ip") String ip) {
		this.deviceInfoService.removeDeviceInfo(ip);
		
		return new ModelAndView(new RedirectView("/device"));
	}
}
